<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:solr="http://www.springframework.org/schema/data/solr"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/data/solr http://www.springframework.org/schema/data/solr/spring-solr.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd"
       default-lazy-init="true">
    <!-- 启用注解方式 -->
    <context:annotation-config/>

    <context:component-scan base-package="com.yilan">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    
	<!-- 外部管理配置文件 -->
	<context:property-placeholder location="classpath:sys_dev.properties"/>
	<!--用于在bean中通过@value注入配置参数-->
	<util:properties id="properties" location="classpath:sys_dev.properties"/>

	<!-- 引入c3p0数据库连接池  -->
	<!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${log4jdbc.jdbc.driverClassName}"></property>
        <property name="jdbcUrl" value="${log4jdbc.jdbc.url}"></property>
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>

        <property name="initialPoolSize" value="${jdbc.initialPoolSize}"></property>
        <property name="minPoolSize" value="${jdbc.minPoolSize}"></property>
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
        <property name="maxIdleTime" value="${jdbc.maxIdleTime}"></property>
        <property name="acquireIncrement" value="${jdbc.acquireIncrement}"></property>
        <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"></property>
        <property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}"></property>
        <property name="breakAfterAcquireFailure" value="${jdbc.breakAfterAcquireFailure}"></property>
        <property name="maxStatements" value="${jdbc.maxStatements}"></property>
        <property name="testConnectionOnCheckout" value="${jdbc.testConnectionOnCheckout}"></property>
	</bean>-->

    <!-- 数据源Druid配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="${jdbc.maxPoolSize}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="config" />
        <!-- 对数据库密码进行解密 -->
        <!--property name="connectionProperties" value="config.decrypt=true" /-->
    </bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	    <property name="basePackage" value="com.yilan.**.dao" />
        <!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口-->
        <property name="annotationClass" value="com.yilan.annotation.MyBatisRepository"/>
		<!-- 不添加这一段将报 java.lang.NoClassDefFoundError: Could not initialize class org.springframework.beans.factory.BeanCreationException-->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>


    <!-- mybatis 配置===================================== -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis.xml"/>
        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
        <property name="typeAliasesPackage" value="com.yilan.vo" />
        <!-- 显式指定Mapper文件位置 -->
        <property name="mapperLocations">
            <list>
                <!-- 表示包或以下所有目录中，以.xml结尾所有文件 -->
                <value>classpath*:com/yilan/mapper/**/*Mapper.xml</value >
            </list>
        </property>
        <property name="plugins">
            <array>
                <!-- com.github.pagehelper为PageHelper类所在包名 -->
                <bean  class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            dialect=mysql
                            reasonable=true
                        </value>
                    </property>
                </bean >
            </array>
        </property>

    </bean>
 	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource" />
	</bean>
    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

    <!-- 定时器配置
    task:executor/@pool-size：可以指定执行线程池的初始大小、最大大小
    task:executor/@queue-capacity：等待执行的任务队列的容量
    task:executor/@rejection-policy：当等待队已满时的策略，分为丢弃、由任务执行器直接运行等方式
    -->
    <task:scheduler id="scheduler" pool-size="10" />
    <task:executor id="executor" keep-alive="3600" pool-size="10-20"
                   queue-capacity="50" rejection-policy="CALLER_RUNS" />
    <task:annotation-driven executor="executor" scheduler="scheduler" />
</beans>